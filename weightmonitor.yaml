substitutions:
  name: "weightmonitor"
  friendly_name: "Weight Monitor"
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  project:
    name: "delqueso.weightmonitor"

# Example configuration entry
http_request:
  verify_ssl: true
  buffer_size_rx: 2048
  buffer_size_tx: 2048
update:
  - platform: http_request
    name: Firmware Update
    source: https://github.com/delqueso/weightmonitor/releases/latest/download/weightmonitor.manifest.json
esp32:
  board: esp32dev
  framework:
    type: esp-idf

api:

ota:
- platform: http_request

wifi:

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: '12345678'
captive_portal:
logger:
  level: NONE


  
services:
  - service: set_zero
    then:
      - globals.set:
          id: calibration_empty
          value: !lambda "return id(raw_weight).state;"
      - logger.log: "Zero point captured!"

  - service: set_loaded
    variables:
      value: float  # This allows passing a value from Home Assistant
    then:
      - globals.set:
          id: calibration_known
          value: !lambda "return id(raw_weight).state;"
      - globals.set:
          id: load_weight
          value: !lambda "return value;"


text_sensor:
  - platform: template
    name: "Project Name"
    lambda: |-
      return {"delqueso.weightmonitor"};


sensor:
  - platform: hx711
    name: "Raw Weight"
    dout_pin: GPIO22
    clk_pin: GPIO19
    gain: 128
    update_interval: 1s
    id: raw_weight

  # Calibrated Weight Calculation
  - platform: template
    name: "Weight"
    id: weight
    update_interval: 1s
    unit_of_measurement: "kg"
    accuracy_decimals: 2
    lambda: |-
      float raw = id(raw_weight).state;
      float offset = id(calibration_empty);
      float known_weight = id(load_weight); // The user-defined weight
      float scale = (id(calibration_known) - offset) / known_weight;
      return (raw - offset) / scale;
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""      

globals:
  - id: calibration_empty
    type: float
    restore_value: yes
    initial_value: '394900'

  - id: calibration_known
    type: float
    restore_value: yes
    initial_value: '262600'

  - id: load_weight
    type: float
    restore_value: yes
    initial_value: '5'  # Default to 5kg  
